name: CMake

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'logseq/**'
      - '.github/workflows/logseq.yml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'logseq/**'
      - '.github/workflows/logseq.yml'

env:
  BUILD_TYPE: Release

jobs:
  x86-build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-11, macos-10.15, windows-2022, windows-2019]
        compiler: [clang, gcc]
        exclude:
          - os: macos-11
            compiler: gcc

          - os: macos-10.15
            compiler: gcc

        include:
          - compiler: gcc
            cc: gcc
            cxx: g++

          - compiler: clang
            cc: clang
            cxx: clang++

    name: x86 Build
    runs-on: ${{ matrix.os }}

    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Configure CMake (No MSYS2)
      if: ${{ matrix.os != 'windows-2022' && matrix.os != 'windows-2019' }}
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_dummy_keyboard=ON -DENABLE_dummy_video=ON

    - name: Build (No MSYS2)
      if: ${{ matrix.os != 'windows-2022' && matrix.os != 'windows-2019' }}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - uses: msys2/setup-msys2@v2
      if: ${{ matrix.os == 'windows-2022' || matrix.os == 'windows-2019' && matrix.compiler == 'gcc' }}
      name: Set up MSYS2 (GCC)
      with:
        update: true
        install: >-
          base-devel
          git
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-ninja

    - uses: msys2/setup-msys2@v2
      if: ${{ matrix.os == 'windows-2022' || matrix.os == 'windows-2019' && matrix.compiler == 'clang' }}
      name: Set up MSYS2 (Clang)
      with:
        update: true
        install: >-
          base-devel
          git
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-ninja
        
    - name: Configure CMake (MSYS2)
      if: ${{ matrix.os == 'windows-2022' || matrix.os == 'windows-2019' }}
      shell: msys2 {0}
      run: /mingw64/bin/cmake.exe -B '${{github.workspace}}/build' -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_dummy_keyboard=ON -DENABLE_dummy_video=ON

    - name: Build (MSYS2)
      if: ${{ matrix.os == 'windows-2022' || matrix.os == 'windows-2019' }}
      shell: msys2 {0}
      run: /mingw64/bin/cmake.exe --build '${{github.workspace}}/build' --config ${{env.BUILD_TYPE}}
      
  other-arch-build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [armv7, aarch64, s390x, ppc64le]
        compiler: [clang, gcc]
    
    name: Non-x86 Build
    
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}
          
          # Will add artifact support later
          
          #setup: |
          #  mkdir -p "${PWD}/artifacts"
          #
          #dockerRunArgs: |
          #  --volume "${PWD}/artifacts:/artifacts"
          #
          #
          #env: |
          #  artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          shell: /bin/sh
          
          install: |
            apt install cmake ${{ matrix.compiler }} build-essential ninja-build
            
          run: |
            git clone https://github.com/ProtoByter/Anima
            cd Anima
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_dummy_keyboard=ON -DENABLE_dummy_video=ON
            cmake --build . --config ${{env.BUILD_TYPE}}
            
          
